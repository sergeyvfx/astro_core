// IERS Conventions table tab5.2b.txt processed to a compilable format.
//
// The table is obtained from the IERS Conventions Centre
// https://iers-conventions.obspm.fr/
//
// Version: IERS Conventions (2010), Working Version 1.3.0
// Archive: iersconventions_v1_3_0.tar.gz
//
// It is used for the GCRS to ITRF conversion as described in [IERS2010],
// Page 54, Section 5.5.4.
//
// [IERS2010] Gerard Petit, and Brian Luzum, IERS Conventions (2010).

// clang-format off
//
// Table 5.2d: Expression for the quantity s(t)+XY/2 based on the IAU 2006 precession
// and IAU 2000A_R06 nutation (ensuring continuity of UT1 on 1st January 2003)
//
// ---------------------------------------------------------------------------------------------------
//
// s + XY/2 = polynomial part + non-polynomial part
//
// ---------------------------------------------------------------------------------------------------
//
// Polynomial part (unit microarcsecond)
//
//   94.0 + 3808.65 t - 122.68 t^2 - 72574.11 t^3 + 27.98 t^4 + 15.62 t^5
//
// ---------------------------------------------------------------------------------------------------
//
// Non-polynomial part (unit microarcsecond)
// (ARG being for various combination of the fundamental arguments of the nutation theory)
//
//   Sum_i[C_{s,0})_i * sin(ARG) + C_{c,0})_i * cos(ARG)]
//
// + Sum_i,j=1,4 [C_{s,j})_i * sin(ARG) + C_{c,j})_i * cos(ARG)] * t^j
//
// The Table below provides the values for C_{s,j})_i and C_{c,j})_i
//
// Cutoff (0.1 microarcsecond and periods less than 500 years)
//
// The expressions for the fundamental arguments appearing in columns 4 to 8 (luni-solar part)
// and in columns 6 to 17 (planetary part) are those of the IERS Conventions 2003
//
// clang-format on

#pragma once

#include <array>
#include <span>

#include "astro_core/version/version.h"

namespace astro_core {
inline namespace ASTRO_CORE_VERSION_NAMESPACE {

namespace iers::table {

struct Table52dRow {
  int i;
  double c_s_j_i;  // C_{s,j})_i
  double c_c_j_i;  // C_{c,j})_i
  int l;
  int l_prime;  // l'
  int F;
  int D;
  int Om;
  int L_Me;
  int L_Ve;
  int L_E;
  int L_Ma;
  int L_J;
  int L_Sa;
  int L_U;
  int L_Ne;
  int p_A;
};

// Flat table representation. Comes directly from the tab5.2d.txt.
// No automatically deductible j markers available.
//
// clang-format off
constexpr auto Table52dFlat = std::to_array<Table52dRow>({

// -----------------------------------------------------------------------------------------------------------------------
//
//   i     C_{s,j})_i       C_{c,j})_i     l     l'    F     D    Om  L_Me  L_Ve   L_E  L_Ma   L_J  L_Sa   L_U  L_Ne   p_A
//
// -----------------------------------------------------------------------------------------------------------------------

 // j = 0  Number of terms = 33

 {   1,       -2640.73,           0.39,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {   2,         -63.53,           0.02,    0,    0,    0,    0,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {   3,         -11.75,          -0.01,    0,    0,    2,   -2,    3,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {   4,         -11.21,          -0.01,    0,    0,    2,   -2,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {   5,           4.57,           0.00,    0,    0,    2,   -2,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {   6,          -2.02,           0.00,    0,    0,    2,    0,    3,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {   7,          -1.98,           0.00,    0,    0,    2,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {   8,           1.72,           0.00,    0,    0,    0,    0,    3,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {   9,           1.41,           0.01,    0,    1,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  10,           1.26,           0.01,    0,    1,    0,    0,   -1,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  11,           0.63,           0.00,    1,    0,    0,    0,   -1,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  12,           0.63,           0.00,    1,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  13,          -0.46,           0.00,    0,    1,    2,   -2,    3,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  14,          -0.45,           0.00,    0,    1,    2,   -2,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  15,          -0.36,           0.00,    0,    0,    4,   -4,    4,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  16,           0.24,           0.12,    0,    0,    1,   -1,    1,    0,   -8,   12,    0,    0,    0,    0,    0,    0},
 {  17,          -0.32,           0.00,    0,    0,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  18,          -0.28,           0.00,    0,    0,    2,    0,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  19,          -0.27,           0.00,    1,    0,    2,    0,    3,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  20,          -0.26,           0.00,    1,    0,    2,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  21,           0.21,           0.00,    0,    0,    2,   -2,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  22,          -0.19,           0.00,    0,    1,   -2,    2,   -3,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  23,          -0.18,           0.00,    0,    1,   -2,    2,   -1,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  24,           0.10,          -0.05,    0,    0,    0,    0,    0,    0,    8,  -13,    0,    0,    0,    0,    0,   -1},
 {  25,          -0.15,           0.00,    0,    0,    0,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  26,           0.14,           0.00,    2,    0,   -2,    0,   -1,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  27,           0.14,           0.00,    0,    1,    2,   -2,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  28,          -0.14,           0.00,    1,    0,    0,   -2,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  29,          -0.14,           0.00,    1,    0,    0,   -2,   -1,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  30,          -0.13,           0.00,    0,    0,    4,   -2,    4,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  31,           0.11,           0.00,    0,    0,    2,   -2,    4,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  32,          -0.11,           0.00,    1,    0,   -2,    0,   -3,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  33,          -0.11,           0.00,    1,    0,   -2,    0,   -1,    0,    0,    0,    0,    0,    0,    0,    0,    0},

 // j = 1  Number of terms = 3

 {  34,          -0.07,           3.57,    0,    0,    0,    0,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  35,           1.73,          -0.03,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  36,           0.00,           0.48,    0,    0,    2,   -2,    3,    0,    0,    0,    0,    0,    0,    0,    0,    0},

 // j = 2  Number of terms = 25

 {  37,         743.52,          -0.17,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  38,          56.91,           0.06,    0,    0,    2,   -2,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  39,           9.84,          -0.01,    0,    0,    2,    0,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  40,          -8.85,           0.01,    0,    0,    0,    0,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  41,          -6.38,          -0.05,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  42,          -3.07,           0.00,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  43,           2.23,           0.00,    0,    1,    2,   -2,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  44,           1.67,           0.00,    0,    0,    2,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  45,           1.30,           0.00,    1,    0,    2,    0,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  46,           0.93,           0.00,    0,    1,   -2,    2,   -2,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  47,           0.68,           0.00,    1,    0,    0,   -2,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  48,          -0.55,           0.00,    0,    0,    2,   -2,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  49,           0.53,           0.00,    1,    0,   -2,    0,   -2,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  50,          -0.27,           0.00,    0,    0,    0,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  51,          -0.27,           0.00,    1,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  52,          -0.26,           0.00,    1,    0,   -2,   -2,   -2,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  53,          -0.25,           0.00,    1,    0,    0,    0,   -1,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  54,           0.22,           0.00,    1,    0,    2,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  55,          -0.21,           0.00,    2,    0,    0,   -2,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  56,           0.20,           0.00,    2,    0,   -2,    0,   -1,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  57,           0.17,           0.00,    0,    0,    2,    2,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  58,           0.13,           0.00,    2,    0,    2,    0,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  59,          -0.13,           0.00,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  60,          -0.12,           0.00,    1,    0,    2,   -2,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  61,          -0.11,           0.00,    0,    0,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0},

 // j = 3  Number of terms = 4

 {  62,           0.30,         -23.42,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  63,          -0.03,          -1.46,    0,    0,    2,   -2,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  64,          -0.01,          -0.25,    0,    0,    2,    0,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0},
 {  65,           0.00,           0.23,    0,    0,    0,    0,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0},

 // j = 4  Number of terms = 1

 {  66,          -0.26,          -0.01,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0},
});

// clang-format on

// The table grouped by frequencies j.
constexpr auto Table52d = std::to_array<std::span<const Table52dRow>>({
    std::span<const Table52dRow>(&Table52dFlat[0], 33),   // j = 0
    std::span<const Table52dRow>(&Table52dFlat[33], 3),   // j = 1
    std::span<const Table52dRow>(&Table52dFlat[36], 25),  // j = 2
    std::span<const Table52dRow>(&Table52dFlat[61], 4),   // j = 3
    std::span<const Table52dRow>(&Table52dFlat[65], 1),   // j = 4
});

}  // namespace iers::table

}  // namespace ASTRO_CORE_VERSION_NAMESPACE
}  // namespace astro_core
